{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\ud83d\ude0e","text":"<p>\u597d\u597d\u5b66\u4e60 \u5929\u5929\u5411\u4e0a</p> <ul> <li> <p> article</p> <ul> <li>C\u8bed\u8a00</li> <li>Jinan </li> </ul> </li> <li> <p> u want to konw</p> <ul> <li>Blogger </li> <li>About Me</li> </ul> </li> </ul> <p> \u670b\u53cb\u4eec! /   \u7ad9\u70b9\u7edf\u8ba1</p> <p>\u9875\u9762\u603b\u6570\uff1a{{pages}} \u603b\u5b57\u6570\uff1a{{words}} \u4ee3\u7801\u5757\u884c\u6570\uff1a{{codes}} \u7f51\u7ad9\u8fd0\u884c\u65f6\u95f4\uff1a</p>"},{"location":"aboutMe/","title":"\u5173\u4e8e\u6211","text":""},{"location":"link/","title":"Link","text":"donot-know's blog \u9633\u5149\u5f00\u6717\u5927\u7537\u5b69\u3002 Twinkle's blog \u5e05\u6c14\u8ff7\u4eba\u5927\u7476\u7476"},{"location":"tag/","title":"\u6807\u7b7e\ud83c\udff7","text":"<ul> <li> <p> Tips</p> <p>\u4ee5\u4e0b\u662f\u7f51\u7ad9\u6587\u7ae0\u7684\u5206\u7c7b\uff0c\u70b9\u51fb\u53ef\u8df3\u8f6c\u5230\u5bf9\u5e94\u5206\u7c7b\u4e0b\u7684\u6587\u7ae0</p> </li> </ul>"},{"location":"tag/#tag:city","title":"city","text":"<ul> <li>            JiNan          </li> <li>            xian          </li> </ul>"},{"location":"tag/#tag:essay","title":"essay","text":"<ul> <li>            Hello River          </li> </ul>"},{"location":"tag/#tag:nagging","title":"nagging","text":"<ul> <li>            Talk1          </li> <li>            Talk2          </li> </ul>"},{"location":"tag/#tag:tech","title":"tech","text":"<ul> <li>            obsidian          </li> </ul>"},{"location":"Essays/","title":"\u968f\u7b14","text":"<p>\ud83e\udd70</p>"},{"location":"Essays/Nag/talk1/","title":"Talk1","text":"<p>\u8fd9\u662f\u4e00\u6bb5\u5f15\u8a00 \u4ec5\u6b64\u800c\u5df2</p>","tags":["nagging"]},{"location":"Essays/Nag/talk1/#test","title":"\u4e0d\u518d\u662ftest","text":"<p>\u611f\u8c22 \u5a9b\u5a9b\u9171 \u63d0\u4f9b\u7684\u670d\u52a1\u5668\uff0c\u8ba9\u6211\u7684\u7f51\u7ad9\u7115\u7136\u4e00\u65b0\uff01(\u5bc4\u4e86) \u76ee\u524d\u7f51\u7ad9\u53ea\u90e8\u7f72\u5728\u4ed6\u7684\u670d\u52a1\u5668\u4e0a netlify\u7684\u6709\u7a7a\u518d\u770b\u770b\u5427 \uff08\u4e3a\u4ec0\u4e48\u8bf4\u7684\u662f\u9493\u9c7c\u7f51\u7ad9\u554a \u8865\u836f\u554a \u597d\u5728\u5df2\u7ecf\u901a\u8fc7\u5199\u90ae\u4ef6\u89e3\u51b3\u4e86\uff09</p>","tags":["nagging"]},{"location":"Essays/Nag/talk1/#_1","title":"\u5173\u4e8e\u5185\u5bb9","text":"<p>\u65b0\u6dfb\u52a0\u4e86\u4e2a\u4eba\u4ecb\u7ecd\u9875\u9762</p> <p>\u6587\u7ae0\u6162\u6162\u4f1a\u6709\u7684 \ud83d\ude2d\ud83d\ude2d\ud83d\ude2d</p>","tags":["nagging"]},{"location":"Essays/Nag/talk1/#_2","title":"\u65b0\u5b66\u671f","text":"<p>good good study... day day down....</p>","tags":["nagging"]},{"location":"Essays/Nag/talk1/#_3","title":"\u770b\u4e0d\u89c1\u6211","text":"<p>\u4e0d\u77e5\u9053\u4e3a\u5565 \u6539\u4e86\u4e2a\u540d\u5b57 \u5c31404notfound\u53fb \u6551....</p>","tags":["nagging"]},{"location":"Essays/Nag/talk2/","title":"\u963f\u91cc\u4e91\uff01 \u4e0d\uff01","text":"<p>\u975e\u5e38\u9057\u61be \u914d\u7f6e\u5230\u5a9b\u5a9b\u9171\u7684\u670d\u52a1\u5668\u5ba3\u544a\u5931\u8d25\uff0c\u5728\u56fd\u5185\u7684\u670d\u52a1\u5668\u90e8\u7f72\u9700\u8981\u5907\u6848 \u9f20\u9f20\u6ca1\u6709\u94b1\u94b1 \u53ea\u80fd.... \u4e0d\u8fc7\u8fd8\u662f\u611f\u8c22\u5a9b\u5a9b\u9171\u7684\u5927\u529b\u652f\u6301</p>","tags":["nagging"]},{"location":"Essays/Nag/talk2/#_2","title":"\u65b0\u7684\u53cb\u94fe","text":"<p>\u70ed\u70c8\u6b22\u8fce\u7476\u7476\u5927\u5e05\u54e5\u7684\u52a0\u5165\ud83e\udd70\ud83e\udd70\ud83e\udd70</p>","tags":["nagging"]},{"location":"Essays/Nag/talk2/#obsidian","title":"\u914d\u7f6eobsidian\uff01","text":"<p>\u4e0d\u7528\u518dhexo cl g d \u4e86\uff01 \u800c\u662f\u4e00\u952e\u4e09\u8fde\uff01 \u5177\u4f53\u7684\u64cd\u4f5c\u65b9\u6cd5 \u82ef\u4eba\u5c06\u4f1a\u518d\u672a\u6765\u67d0\u5929\u5b8c\u5584\uff08\u6700\u8fd1\u5b66\u4e1a\u7e41\u91cd\ud83d\ude2d\uff09</p>","tags":["nagging"]},{"location":"Essays/Nag/talk2/#_3","title":"\u65b0\u7684\u4e13\u9898\uff01","text":"<p>\u57ce\u5e02\u5370\u8c61 \u8bb0\u5f55\u8d70\u8fc7\u7684\u8def... (\u5c1a\u672a\u65bd\u5de5)</p>","tags":["nagging"]},{"location":"Essays/Nag/talk2/#below-is-test","title":"below is test","text":"<p>\u8fd9\u662f\u4e00\u4e2a\u7528\u4e8e\u6d4b\u8bd5\u7684\u6587\u6863\u3002</p> <p>\u7b2c\u4e8c\u6b21\u6d4b\u8bd5 hook\uff1ftrue or not false</p> <p>\u7b2c\u4e09\u6b21\u6d4b\u8bd5 \uff01\uff01\uff01 \u6765\u4e2a\u5c0f\u8868\u60c5\ud83d\ude0e\ud83d\ude2d</p>","tags":["nagging"]},{"location":"Essays/Travel/beijing/","title":"here is beijing!","text":""},{"location":"Essays/Travel/jinan/","title":"\u5e8f","text":"<p>\u5f00\u542f\u57ce\u5e02\u5370\u8c61\u4e3b\u8981\u662f\u60f3\u8bb0\u5f55\u4e00\u4e0b\u8d70\u8fc7\u7684\u5730\u65b9\uff0c\u4ece\u5c0f\u5230\u5927\u8d70\u8fc7<code>\u4fe1\u9633</code>\u3001<code>\u4e1c\u839e</code>\u3001<code>\u6d1b\u9633</code>\u3001<code>\u5317\u4eac</code>\u3001<code>\u5357\u4eac</code>\u3001<code>\u6d4e\u5357</code> \u5c31\u5012\u7740\u8bb0\u5f55\u5427\u3002</p>","tags":["city"]},{"location":"Essays/Travel/jinan/#_2","title":"\u6cc9\u57ce","text":"","tags":["city"]},{"location":"Essays/Travel/jinan/#_3","title":"\u521d\u5370\u8c61","text":"<p>\u6d4e\u5357\uff0c\u7b2c\u4e00\u5370\u8c61\u5c31\u662f\u8001\u820d&amp;\u5927\u660e\u6e56\u7554\u590f\u96e8\u8377\ud83d\ude0d\u3002\u6574\u4f53\u611f\u53d7\u662f\u975e\u5e38\u68d2\u7684\uff0c\u5341\u5206\u6021\u4eba\u7684\u6c14\u5019\uff0c\u540c\u65f6\u6211\u4e5f\u6bd4\u8f83\u559c\u6b22\u6c34\u591a\u7684\u57ce\u5e02\uff0c\u6d4e\u5357\u6070\u597d\u5c31\u662f\u6cc9\u57ce\ud83e\udd70\u3002\u4e0b\u9762\u662f\u6e38\u73a9\u8def\u7ebf\uff1a day1 \u6c11\u65cf\u5927\u8857\u65e9\u5e02-\u5927\u660e\u6e56-\u73cd\u73e0\u6cc9-\u66f2\u6c34\u4ead\u8857-\u8d85\u7136\u697c day2 \u4e94\u9f99\u6f6d-\u8db5\u7a81\u6cc9-\u9ed1\u864e\u6cc9-\u767e\u82b1\u6d32 day3 \u5c71\u4e1c\u535a\u7269\u9986-\u7f8e\u672f\u9986</p>","tags":["city"]},{"location":"Essays/Travel/jinan/#_4","title":"\u6e38\u8bb0","text":"<p>\u5927\u660e\u6e56\u975e\u5e38\u7684\u597d\u770b\uff0c\u5750\u8239\u4e5f\u5341\u5206\u4fbf\u5b9c\uff08\u5341\u5143\uff01\uff09\uff0c\u4e0d\u8fc7\u611f\u89c9\u5404\u4e2a\u5730\u65b9\u7684\u6e56\u90fd\u5927\u5dee\u4e0d\u5dee\uff0c\u91cc\u9762\u4e5f\u6709\u4e00\u4e9b\u56ed\u6797\u5efa\u7b51\uff0c\u5341\u5206\u597d\u62cd\u3002\u8d85\u7136\u697c\u4e5f\u5341\u5206\u7684\u6c14\u6d3e\uff0c\u4e0d\u8fc7\u8001\u820d\u7eaa\u5ff5\u9986\u591c\u665a\u5173\u95e8\u4e86\uff0c\u53ef\u60dc\u6ca1\u6709\u8fdb\u53bb\u3002 \u73cd\u73e0\u6cc9\u5728\u653f\u5e9c\u91cc\u9762\uff0c\u8fd9\u662f\u6765\u6d4e\u5357\u770b\u5230\u7684\u7b2c\u4e00\u4e2a\u6cc9\uff0c\u592a\u6e05\u6f88\u4e86\uff01\u65e0\u6cd5\u60f3\u8c61\ud83e\udd37\u200d\u2642\ufe0f\u7684\u90a3\u79cd\uff0c\u91cc\u9762\u6709\u8bb8\u591a\u5927\u80d6\ud83d\udc1f\uff0c\u4e0d\u7531\u5f97\u60f3\u5230\u5c0f\u77f3\u6f6d\u8bb0\u4e2d\uff1a</p> <p>\u7686\u82e5\u7a7a\u6e38\u65e0\u6240\u4f9d\u3002</p> <p>\u7136\u540e\u5c31\u662f\u4e94\u9f99\u6f6d\uff08\u514d\u8d39\uff09\uff0c\u4f9d\u7136\u5341\u5206\u6e05\u6f88\uff0c\u800c\u4e14\u4e94\u9f99\u6f6d\u6709\u4e00\u4e9b\u77f3\u5934\uff0c\u4ece\u77f3\u5934\u770b\u53bb\uff0c\u8425\u9020\u51fa\u4e00\u79cd\u4e2d\u5f0f\u9020\u666f\u7684\u611f\u89c9\uff0c\u5341\u5206\u6f02\u4eae\uff01\uff08\u7167\u7247\u5148\u6b20\u7740\uff0c\u4f5c\u8005\u8fd8\u6ca1\u6709\u642d\u5efa\u56fe\u5e8a\u61d2\u5f97\u672c\u5730\u4e0a\u4f20\uff09\u3002 \u63a5\u4e0b\u6765\u5c31\u662f\u5929\u4e0b\u7b2c\u4e00\u6cc9\u2014\u2014\u8db5\u7a81\u6cc9\uff01 \u53f9\u4e3a\u89c2\u6b62\uff0c\u5c0f\u5b66\u5c31\u5b66\u8fc7\u7684\u8bfe\u6587\uff0c\u7b2c\u4e00\u6b21\u770b\u89c1\uff0c\u5341\u5206\u9707\u64bc\uff0c\u6c34\u4f3c\u4e4e\u771f\u7684\u4e0d\u5b58\u5728\uff0c\u4e5f\u662f\u7b2c\u4e00\u6b21\u770b\u89c1\u4f55\u4e3a\u7eff\u6c34\uff0c\u8ba9\u4eba\u9a7b\u8db3\uff0c\u6d41\u8fde\u5fd8\u8fd4\u3002\u73b0\u5728\u60f3\u60f3\u8fd8\u662f\u89c9\u5f97\u770b\u4e0d\u817b\u3002\u800c\u4e14\u91cc\u9762\u4e0d\u4ec5\u4ec5\u53ea\u6709\u8db5\u7a81\u6cc9\uff0c\u8fd8\u6709\u8bb8\u591a\u522b\u7684\u6c34\uff0c\u90fd\u5341\u5206\u7684\u597d\u770b\uff0c\u82ef\u4eba\u5341\u5206\u7231\u770b\u5c71\u5c71\u6c34\u6c34\uff0c\u82b1\u8349\u6811\u6728\ud83e\udd17\ud83d\ude4c\u3002 \u9ed1\u864e\u6cc9\uff0c\u5341\u5206\u6c14\u6d3e\uff0c\u6c34\u4ece\u6237\u53e3\u55b7\u51fa\u3002\u4e0a\u65b9\u7684\u8336\u5e84\u514d\u8d39\u76d6\u7ae0 \u9ed1\u864e\u6cc9\u7684\u6cc9\u6c34\u4e0d\u597d\u559d\uff0c\u4e94\u9f99\u6f6d\u7684\u8fd8\u53ef\u4ee5\u3002 \u767e\u82b1\u6d32\uff0c\u6c34\u6700\u597d\u559d\uff0c\u6bd4\u519c\u592b\u5c71\u6cc9\u8fd8\u751c\uff08\u519c\u592b\u5c71\u6cc9\u6253\u94b1\uff09 \u7f8e\u672f\u9986\u5b58\u5305\u7684\uff0c\u6ca1\u65f6\u95f4\u53c2\u89c2\u3002 \u535a\u7269\u9986\uff0c\u597d\u770b\u3002\u8d76\u4e0a\u4e86\u77ff\u77f3\u5c55\uff0c\u770b\u89c1\u4e86\u8424\u77f3\uff0c\u9ed1\u66dc\u77f3\uff08mc\u4e71\u5165\uff09\uff0c\u4f1a\u53d1\u5149\u7684\u77f3\u5934\u3002\u597d\u770b</p>","tags":["city"]},{"location":"Essays/Travel/jinan/#_5","title":"\u98df\u8bb0","text":"<p>\u628a\u5b50\u8089\uff0c\u5403\u4e86\u8fd8\u53ef\u4ee5\uff0c\u542c\u53d6\u540c\u5b66\u548c\u653b\u7565\u5efa\u8bae\u5403\u7684\u662f\u6b66\u5cb3\u5e99\u628a\u5b50\u8089\u3002\u63a8\u8350 \u8d85\u610f\u5174\uff0c\u8fdb\u53bb\u611f\u89c9\u50cf\u5b66\u4e60\u98df\u5802\uff0c\u679c\u65ad\u79bb\u5f00\u3002 \u5170\u6e58\u5b50\uff0c\u597d\u5403\uff01\u8fd8\u4e0d\u8d35\uff0c\u867d\u7136\u53bb\u6d4e\u5357\u5403\u6e58\u83dc\u6709\u70b9\u5947\u602a\uff0c\u4e0d\u8fc7\u786e\u5b9e\u597d\u5403\u3002 \u767d\u5ad6\u7684\u8bd5\u5403\u5c0f\u86cb\u7cd5\uff0c\u597d\u5403\u3002 \u4e00\u4e2a\u70b8\u9e21\u70b9\uff0c\u4e00\u822c\u822c\uff0c\u4e16\u8d38\u91cc\u9762 \u9c81\u83dc\u6ca1\u6709\u5403\uff0c\u4eba\u592a\u5c11\u4e86\u5403\u4e0d\u5212\u7b97\uff0c\u6545\u6ca1\u5403\u3002</p>","tags":["city"]},{"location":"Essays/Travel/jinan/#end","title":"end","text":"<p>\u6d4e\u5357\u5f88\u597d\uff0c\u53ea\u4e0d\u8fc7\u5730\u94c1\u4e0d\u662f\u7279\u522b\u591a\uff0c\u4e0d\u8fc7\u516c\u4ea4\u65b9\u4fbf\uff0c\u800c\u4e14\u5927\u5b66\u751f\u53bb\u8fd8\u4e70\u514d\u8d39\u5750\u516c\u4ea4\u5730\u94c1\uff0c\u53c2\u89c2\u666f\u70b9\u3002\u5343\u4f5b\u5c71\u56e0\u4e3a\u4e0d\u60f3\u722c\u5c71\u5c31\u6ca1\u53bb\u3002\uff08\u5148\u5199\u8fd9\u4e48\u591a\u5427\uff09 \u6d4e\u5357\uff0c\u671f\u5f85\u4e0b\u6b21\u518d\u89c1~\ud83e\udd70</p>","tags":["city"]},{"location":"Essays/Travel/xian/","title":"\u5370\u8c61\u897f\u5b89","text":"<p>\u5c1a\u672a\u65bd\u5de5...</p>","tags":["city"]},{"location":"Learn/","title":"Learing, all u can do","text":"<p>learing time~ Just take it easy~</p>"},{"location":"Learn/DataStruct/","title":"DataStruct\ud83d\ude4c","text":""},{"location":"Learn/DataStruct/#_1","title":"\u6570\u636e\u7ed3\u6784","text":""},{"location":"Learn/DataStruct/#_2","title":"\u5355\u5411\u94fe\u8868","text":""},{"location":"Learn/DataStruct/#1","title":"1. \u5b9a\u4e49\u8282\u70b9","text":"<pre><code>typedef struct Node\n{\n    int data;\n    struct Node *next;\n} Node;\n</code></pre>"},{"location":"Learn/DataStruct/#2","title":"2. \u521d\u59cb\u5316\u94fe\u8868","text":"<pre><code>Node *initList()\n{\n    Node *head = (Node *)malloc(sizeof(Node));\n    head-&gt;next = NULL;\n    return head;\n}\n</code></pre>"},{"location":"Learn/DataStruct/#3","title":"3. \u6dfb\u52a0\u8282\u70b9","text":"<pre><code>void addNode(Node *head, int data)\n{\n    Node *temp = (Node *)malloc(sizeof(Node));\n    temp-&gt;data = data;\n    temp-&gt;next = NULL;\n\n    // \u67e5\u627e\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n    Node *cur = head;\n    while (cur-&gt;next != NULL)\n    {\n        cur = cur-&gt;next;\n    }\n\n    // \u6dfb\u52a0\u65b0\u8282\u70b9\u5230\u672b\u5c3e\n    cur-&gt;next = temp;\n}\n</code></pre>"},{"location":"Learn/DataStruct/#4","title":"4. \u5220\u9664\u8282\u70b9","text":"<pre><code>void delNode(Node *head, int data)\n{\n    if (head == NULL || head-&gt;next == NULL)\n        return; // \u7a7a\u94fe\u8868\u6216\u53ea\u6709\u5934\u8282\u70b9\n\n    // \u7279\u6b8a\u60c5\u51b5\uff1a\u5220\u9664\u5934\u8282\u70b9\n    if (head-&gt;data == data)\n    {\n        Node *temp = head;\n        head = head-&gt;next;\n        free(temp);\n        return;\n    }\n\n    Node *cur = head;\n    while (cur-&gt;next != NULL &amp;&amp; cur-&gt;next-&gt;data != data)\n    {\n        cur = cur-&gt;next;\n    }\n\n    if (cur-&gt;next == NULL)\n    {\n        return; // \u672a\u627e\u5230\n    }\n\n    Node *temp = cur-&gt;next;\n    cur-&gt;next = temp-&gt;next;\n    free(temp);\n}\n</code></pre>"},{"location":"Learn/DataStruct/#5","title":"5. \u67e5\u627e\u8282\u70b9","text":"<pre><code>Node *findNode(Node *head, int data)\n{\n    Node *cur = head-&gt;next; // \u4ece\u9996\u8282\u70b9\u540e\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\n    while (cur != NULL &amp;&amp; cur-&gt;data != data)\n    {\n        cur = cur-&gt;next;\n    }\n    return cur; // \u627e\u5230\u8fd4\u56de\u8be5\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56de NULL\n}\n</code></pre>"},{"location":"Learn/DataStruct/#_3","title":"\u6808","text":""},{"location":"Learn/DataStruct/#_4","title":"\u987a\u5e8f\u6808\uff08\u591a\u6808\uff09","text":"<pre><code>#define MAXSIZE 100\ntypedef struct Stack\n{\n    int data[MAXSIZE];\n    int top;\n} Stack;\n\n// \u521d\u59cb\u5316\u6808\nvoid initStack(Stack *s) { s-&gt;top = -1; }\n\n// \u5224\u65ad\u6808\u662f\u5426\u4e3a\u7a7a\nint isEmpty(Stack *s) { return s-&gt;top == -1; }\n\n// \u5224\u65ad\u6808\u662f\u5426\u6ee1\nint isFull(Stack *s) { return s-&gt;top == MAXSIZE - 1; }\n\n// \u5165\u6808\nvoid push(Stack *s, int value)\n{\n    if (isFull(s)) return;\n    s-&gt;data[++s-&gt;top] = value;\n}\n\n// \u51fa\u6808\nint pop(Stack *s)\n{\n    return isEmpty(s) ? -1 : s-&gt;data[s-&gt;top--];\n}\n\n// \u83b7\u53d6\u6808\u9876\u5143\u7d20\nint peek(Stack *s)\n{\n    return isEmpty(s) ? -1 : s-&gt;data[s-&gt;top];\n}\n</code></pre>"},{"location":"Learn/DataStruct/#_5","title":"\u5355\u6808\u5b9e\u73b0","text":"<pre><code>int stack[MAXSIZE];\nint top = -1;\n\nvoid push(int value) { stack[++top] = value; }\nint pop() { return stack[top--]; }\nint peek() { return stack[top]; }\nint isEmpty() { return top == -1; }\nint isFull() { return top == MAXSIZE - 1; }\n</code></pre>"},{"location":"Learn/DataStruct/#_6","title":"\u961f\u5217","text":""},{"location":"Learn/DataStruct/#_7","title":"\u5faa\u73af\u961f\u5217","text":"<pre><code>int queue[MAXSIZE];\nint front = 0;\nint rear = MAXSIZE - 1;\n\nvoid enqueue(int value)\n{\n    rear = (rear + 1) % MAXSIZE;\n    queue[rear] = value;\n}\n\nint dequeue()\n{\n    front = (front + 1) % MAXSIZE;\n    return queue[front];\n}\n\nint peekQueue() { return queue[(front + 1) % MAXSIZE]; }\nint isQueueEmpty() { return front == rear; }\nint isQueueFull() { return (rear + 1) % MAXSIZE == front; }\n</code></pre>"},{"location":"Learn/DataStruct/#_8","title":"\u6811","text":""},{"location":"Learn/DataStruct/#0","title":"0.\u6027\u8d28&amp;\u6982\u5ff5","text":"<ul> <li>\u975e\u7a7a\u4e8c\u53c9\u6811(NEDT) \u6709n\u4e2a\u8282\u70b9 \u5219\u6709n-1\u4e2a\u5206\u652f</li> <li>NEDT \u7b2ci\u5c42\u6700\u591a\u6709 \\(2^{i-1}\\)\u4e2a\u7ed3\u70b9</li> <li>NEDT \u6df1\u5ea6h \u6700\u591a\u6709\\(2^h-1\\)\u4e2a\u7ed3\u70b9</li> <li> <p>NEDT\u6709n\u4e2a\u53f6\u7ed3\u70b9,\u6709N\u4e2a\u5ea6\u4e3a2\u7684\u7ed3\u70b9,\u5219 n=N+1</p> <p>\u62d3\u5c55:\\(n_0 = \\sum_{i=1}^m(m-1)n_m\\)  \u5176\u4e2dm\u662fbt\u7684\u5ea6</p> </li> <li> <p>NEDT n\u4e2a\u7ed3\u70b9 \\(h=[log_2^n]+1\\)(\u5411\u4e0b\u53d6\u6574)</p> </li> <li>\u6811\u8f6c\u4e8c\u53c9\u6811\uff1a\u5144\u5f1f\u8282\u70b9\u8fde\u7ebf\uff1b\u5220\u9664\u9664\u5de6\u5b69\u5b50\u5916\u7684\u6240\u6709\u7ed3\u70b9\u8fde\u7ebf</li> <li>\u6811\u6797\u8f6c\u4e8c\u53c9\u6811\uff1a\u5148\u628a\u6570\u91cf\u4e2d\u7684\u6811\u8f6c\u5316\u4e3a\u4e8c\u53c9\u6811\uff1b\u518d\u4ece\u6700\u540e\u7684\u4e8c\u53c9\u6811\u5f00\u59cb\u4f9d\u6b21\u4f5c\u4e3a\u524d\u4e00\u4e2a\u6811\u7684\u53f3\u5b50\u6811</li> <li>\u54c8\u592b\u66fc\u6811\uff1a\u7279\u70b9\uff1a\u6ca1\u6709\u5ea6\u4e3a1\u7684\u7ed3\u70b9  \u6784\u9020\u6700\u5c0f\u5e26\u6743\u8def: \u628a\u6743\u770b\u4f5c\u6811\u6797\uff0c\u6bcf\u6b21\u628a\u6743\u6700\u5c0f\u7684\u4e24\u68f5\u6811\u5408\u6210\u4e00\u4e2a\u4e8c\u53c9\u6811\uff0c\u6743\u76f8\u52a0\u653e\u56de\u6811\u6797\uff0c\u91cd\u590d\u64cd\u4f5c</li> <li>\u524d\u5e8f/\u540e\u5e8f\u904d\u5386 \u5b9a\u6839\u8282\u70b9 \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u627e\u5230\u8be5\u7ed3\u70b9 \u5de6\u53f3\u5206\u522b\u4e3a\u5de6\u53f3\u5b50\u6811\uff0c\u91cd\u590d\u64cd\u4f5c</li> </ul>"},{"location":"Learn/DataStruct/#1_1","title":"1. \u5b9a\u4e49\u8282\u70b9","text":"<pre><code>typedef struct TreeNode\n{\n    int data;\n    struct TreeNode *left;\n    struct TreeNode *right;\n} TreeNode;\n</code></pre>"},{"location":"Learn/DataStruct/#2_1","title":"2. \u521b\u5efa\u8282\u70b9","text":"<p>\u6709\u65f6\u5019\u53ef\u4ee5\u4e0d\u5355\u72ec\u5217\u51fa \u76f4\u63a5\u653e\u5728\u63d2\u5165\u51fd\u6570\u4e2d\u6784\u9020newnode <pre><code>TreeNode *createNode(int data)\n{\n    TreeNode *newNode = (TreeNode *)malloc(sizeof(TreeNode));\n    newNode-&gt;data = data;\n    newNode-&gt;left = newNode-&gt;right = NULL;\n    return newNode;\n}\n</code></pre></p>"},{"location":"Learn/DataStruct/#3_1","title":"3. \u63d2\u5165\u8282\u70b9\uff08\u4e8c\u53c9\u641c\u7d22\u6811\uff09","text":"<pre><code>TreeNode *insertBST(TreeNode *root, int data)\n{\n    if (!root) return createNode(data);\n    if (root-&gt;data &gt; data) root-&gt;left = insert(root-&gt;left, data);\n    else root-&gt;right = insert(root-&gt;right, data);\n    return root;\n}\n</code></pre>"},{"location":"Learn/DataStruct/#4-bst","title":"4. \u67e5\u627e\u8282\u70b9(BST)","text":"<pre><code>TreeNode *searchBST(TreeNode *root, int data)\n{\n    if (!root || root-&gt;data == data) return root;\n    return search(data &lt; root-&gt;data ? root-&gt;left : root-&gt;right, data);\n}\n</code></pre>"},{"location":"Learn/DataStruct/#5_1","title":"5.\u904d\u5386\u65b9\u6cd5","text":"<pre><code>// \u524d\u5e8f\u904d\u5386\nvoid preOrder(TreeNode *root)\n{\n    if (root) {\n        printf(\"%d \", root-&gt;data);\n        preOrder(root-&gt;left);\n        preOrder(root-&gt;right);\n    }\n}\n\n// \u4e2d\u5e8f\u904d\u5386\nvoid inOrder(TreeNode *root)\n{\n    if (root) {\n        inOrder(root-&gt;left);\n        printf(\"%d \", root-&gt;data);\n        inOrder(root-&gt;right);\n    }\n}\n\n// \u540e\u5e8f\u904d\u5386\nvoid postOrder(TreeNode *root)\n{\n    if (root) {\n        postOrder(root-&gt;left);\n        postOrder(root-&gt;right);\n        printf(\"%d \", root-&gt;data);\n    }\n}\n</code></pre>"},{"location":"Learn/DataStruct/#6x","title":"6.\u5bf9\u4e8e\u503c\u4e3ax\u7684\u6709\u5173\u5904\u7406","text":"<pre><code>int op_x(btree *root, datatype x)\n{\n    // null \u7406\u89e3\u4e3a\u5047 \u5373\u6ca1\u6709\u627e\u5230x\n    if (root == NULL)\n    {\n        return 1;\n    }\n    // \u627e\u5230x \n    if (root-&gt;data == x&amp;&amp;hight!=1)\n    {\n        // \u5904\u7406\n    }\n\n// \u5982\u679c\u662fBST\u53ef\u4ee5\u5982\u4e0b\u64cd\u4f5c \n//    else if (x &lt; root-&gt;data)\n//    {\n//        return heightofx(root-&gt;lchild, x, hight + 1);\n//    }\n//    else\n//    {\n//        return heightofx(root-&gt;rchild, x, hight + 1);\n//    }\n\n    // \u5de6\u5b50\u6811\u5bfb\u627e\n        int left = op_x(root-&gt;lchild, x);\n        if (leftDepth != 1)//\u6b64\u5904\u8bf4\u660e\u627e\u5230\u4e86 \u4e5f\u5c31\u662f\u4e0d\u5047 != data when case null\n        {\n         //    \u64cd\u4f5c\n         return //something\n        }\n\n    //  \u53f3\u5b50\u6811\u5bfb\u627e \u65e0\u8bba\u627e\u6ca1\u627e\u5230\u4e5f\u8981\u8fd4\u56de\n        int right = op_x(root-&gt;rchild, x);\n        return //something \n}\n</code></pre>"},{"location":"Learn/DataStruct/#7","title":"7.\u53f6\u8282\u70b9\u5904\u7406","text":"<pre><code>void findleaf(btree *root)\n{\n    if (root == NULL)\n    {\n        return;\n    }\n    if (root-&gt;lchild == NULL &amp;&amp; root-&gt;rchild == NULL)\n    {\n        // \u5904\u7406\u53f6\u8282\u70b9\n    }\n    else\n    {\n        findleaf(root-&gt;lchild);\n        findleaf(root-&gt;rchild);\n    }\n}\n</code></pre>"},{"location":"Learn/DataStruct/#_9","title":"\u56fe","text":""},{"location":"Learn/DataStruct/#_10","title":"\u57fa\u7840\u64cd\u4f5c","text":"<pre><code>//  \u90bb\u63a5\u77e9\u9635\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n#define MAX_VERTICES 100\n\ntypedef struct\n{\n    int adjMatrix[MAX_VERTICES][MAX_VERTICES];\n    int numVertices;\n} Graph;\n\n// \u521d\u59cb\u5316\u56fe\nvoid initGraph(Graph *g, int numVertices)\n{\n    g-&gt;numVertices = numVertices;\n    for (int i = 0; i &lt; numVertices; i++)\n    {\n        for (int j = 0; j &lt; numVertices; j++)\n        {\n            g-&gt;adjMatrix[i][j] = 0;\n        }\n    }\n}\n\n// \u6dfb\u52a0\u8fb9\nvoid addEdge(Graph *g, int src, int dest)\n{\n    g-&gt;adjMatrix[src][dest] = 1;\n    // \u5982\u679c\u662f\u65e0\u5411\u56fe\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u53cd\u5411\u8fb9\n    // g-&gt;adjMatrix[dest][src] = 1;\n}\n\n// \u6253\u5370\u90bb\u63a5\u77e9\u9635\nvoid printGraph(Graph *g)\n{\n    for (int i = 0; i &lt; g-&gt;numVertices; i++)\n    {\n        for (int j = 0; j &lt; g-&gt;numVertices; j++)\n        {\n            printf(\"%d \", g-&gt;adjMatrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n\n// \u90bb\u63a5\u8868\ntypedef struct Edge\n{\n    int dest;\n    struct Edge *next;\n} Edge;\n\ntypedef struct Vertex\n{\n    int id;\n    Edge *edges;\n} Vertex;\n\ntypedef struct\n{\n    Vertex vertices[MAX_VERTICES];\n    int numVertices;\n} GraphAdjList;\n\n// \u521d\u59cb\u5316\u56fe\nvoid initGraphAdjList(GraphAdjList *g, int numVertices)\n{\n    g-&gt;numVertices = numVertices;\n    for (int i = 0; i &lt; numVertices; i++)\n    {\n        g-&gt;vertices[i].id = i;\n        g-&gt;vertices[i].edges = NULL;\n    }\n}\n\n// \u6dfb\u52a0\u8fb9\nvoid addEdgeAdjList(GraphAdjList *g, int src, int dest)\n{\n    // \u521b\u5efa\u65b0\u8fb9\n    Edge *newEdge = (Edge *)malloc(sizeof(Edge));\n    newEdge-&gt;dest = dest;\n    newEdge-&gt;next = g-&gt;vertices[src].edges;\n    g-&gt;vertices[src].edges = newEdge;\n\n    // \u5982\u679c\u662f\u65e0\u5411\u56fe\uff0c\u8fd8\u9700\u8981\u6dfb\u52a0\u53cd\u5411\u8fb9\n    newEdge = (Edge *)malloc(sizeof(Edge));\n    newEdge-&gt;dest = src;\n    newEdge-&gt;next = g-&gt;vertices[dest].edges;\n    g-&gt;vertices[dest].edges = newEdge;\n}\n\n// \u6253\u5370\u90bb\u63a5\u8868\nvoid printGraphAdjList(GraphAdjList *g)\n{\n    for (int i = 0; i &lt; g-&gt;numVertices; i++)\n    {\n        printf(\"%d: \", g-&gt;vertices[i].id);\n        Edge *current = g-&gt;vertices[i].edges;\n        while (current != NULL)\n        {\n            printf(\"%d -&gt; \", current-&gt;dest);\n            current = current-&gt;next;\n        }\n        printf(\"NULL\\n\");\n    }\n}\n// \u5220\u9664\u8fb9\nvoid deleteEdgeAdjList(GraphAdjList *g, int src, int dest)\n{\n    Edge *current = g-&gt;vertices[src].edges;\n    Edge *prev = NULL;\n\n    // \u67e5\u627e\u6e90\u9876\u70b9\u7684\u8fb9\n    while (current != NULL &amp;&amp; current-&gt;dest != dest)\n    {\n        prev = current;\n        current = current-&gt;next;\n    }\n\n    // \u5982\u679c\u627e\u5230\uff0c\u5220\u9664\u8be5\u8fb9\n    if (current != NULL)\n    {\n        if (prev == NULL)\n        {\n            g-&gt;vertices[src].edges = current-&gt;next; // \u5220\u9664\u5934\u8282\u70b9\n        }\n        else\n        {\n            prev-&gt;next = current-&gt;next; // \u5220\u9664\u4e2d\u95f4\u6216\u5c3e\u8282\u70b9\n        }\n        free(current);\n    }\n\n    // \u5220\u9664\u53cd\u5411\u8fb9\uff08\u5982\u679c\u662f\u65e0\u5411\u56fe\uff09\n    current = g-&gt;vertices[dest].edges;\n    prev = NULL;\n\n    while (current != NULL &amp;&amp; current-&gt;dest != src)\n    {\n        prev = current;\n        current = current-&gt;next;\n    }\n\n    if (current != NULL)\n    {\n        if (prev == NULL)\n        {\n            g-&gt;vertices[dest].edges = current-&gt;next; // \u5220\u9664\u5934\u8282\u70b9\n        }\n        else\n        {\n            prev-&gt;next = current-&gt;next; // \u5220\u9664\u4e2d\u95f4\u6216\u5c3e\u8282\u70b9\n        }\n        free(current);\n    }\n}\n\n// \u5220\u9664\u9876\u70b9\nvoid deleteVertexAdjList(GraphAdjList *g, int vertexId)\n{\n    if (vertexId &lt; 0 || vertexId &gt;= g-&gt;numVertices)\n    {\n        return;\n    }\n\n    // \u5220\u9664\u6240\u6709\u4e0e\u8be5\u9876\u70b9\u76f8\u5173\u7684\u8fb9\n    for (int i = 0; i &lt; g-&gt;numVertices; i++)\n    {\n        if (i != vertexId)\n        {\n            deleteEdgeAdjList(g, i, vertexId);\n        }\n    }\n\n    // \u5220\u9664\u9876\u70b9\u672c\u8eab\n    for (int i = vertexId; i &lt; g-&gt;numVertices - 1; i++)\n    {\n        g-&gt;vertices[i] = g-&gt;vertices[i + 1];\n    }\n    g-&gt;numVertices--;\n}\n\n// \u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff08DFS\uff09\nvoid dfs(GraphAdjList *g, int vertexId, int *visited)\n{\n    visited[vertexId] = 1; // \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n    printf(\"%d \", vertexId);\n\n    Edge *current = g-&gt;vertices[vertexId].edges;\n    while (current != NULL)\n    {\n        if (!visited[current-&gt;dest])\n        {\n            dfs(g, current-&gt;dest, visited);\n        }\n        current = current-&gt;next;\n    }\n}\n// \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff08BFS\uff09\nvoid bfs(GraphAdjList *g, int startVertex)\n{\n    int visited[MAX_VERTICES] = {0}; // \u8bbf\u95ee\u6807\u8bb0\u6570\u7ec4\n    int queue[MAX_VERTICES];         // \u961f\u5217\n    int front = 0, rear = -1;        // \u961f\u5217\u6307\u9488\n\n    visited[startVertex] = 1;    // \u6807\u8bb0\u8d77\u59cb\u9876\u70b9\u4e3a\u5df2\u8bbf\u95ee\n    queue[++rear] = startVertex; // \u5165\u961f\n\n    while (front &lt;= rear)\n    {\n        int currentVertex = queue[front++]; // \u51fa\u961f\n        printf(\"%d \", currentVertex);\n\n        Edge *current = g-&gt;vertices[currentVertex].edges;\n        while (current != NULL)\n        {\n            if (!visited[current-&gt;dest])\n            {\n                visited[current-&gt;dest] = 1;    // \u6807\u8bb0\u4e3a\u5df2\u8bbf\u95ee\n                queue[++rear] = current-&gt;dest; // \u5165\u961f\n            }\n            current = current-&gt;next;\n        }\n    }\n}\n</code></pre>"},{"location":"Learn/DataStruct/#prim-mst","title":"prim-mst","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\n// \u90bb\u63a5\u77e9\u9635\n#define MAX_VERTEX_NUM 50\n#define INFINITY 999999 // \u65e0\u7a77\u5927\ntypedef struct edge\n{\n    int id;\n    int weight;\n} edge;\n\nedge graph[MAX_VERTEX_NUM][MAX_VERTEX_NUM];\nint vertex_count = 0;\nint edge_count = 0;\ntypedef struct mst\n{\n    int u;\n    int v;\n    int weight;\n    int id; // \u8fb9\u7684\u552f\u4e00\u6807\u8bc6\u7b26\n} mst;\nmst minst[MAX_VERTEX_NUM]; // \u5b58\u50a8\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\nint mstcount = 0;          // \u8bb0\u5f55\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6570\n\nvoid cmp(int *a, int *b)\n{\n    return (*a - *b);\n}\n// \u6700\u5c0f\u751f\u6210\u6811 Prim \u7b97\u6cd5\nvoid prim(int start)\n{\n    int lowcost[MAX_VERTEX_NUM];       // \u5b58\u50a8\u5f53\u524d\u6700\u5c0f\u6743\u503c\n    int closest[MAX_VERTEX_NUM];       // \u5b58\u50a8\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u6700\u8fd1\u7684\u9876\u70b9\n    int visited[MAX_VERTEX_NUM] = {0}; // \u8bb0\u5f55\u9876\u70b9\u662f\u5426\u5df2\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n\n    // \u521d\u59cb\u5316\u6570\u7ec4\n    for (int i = 0; i &lt; vertex_count; i++)\n    {\n        lowcost[i] = INFINITY;\n        closest[i] = start;\n    }\n\n    // \u8d77\u59cb\u70b9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n    visited[start] = 1;\n    lowcost[start] = 0;\n    mstcount = 0; // \u91cd\u7f6e\u6700\u5c0f\u751f\u6210\u6811\u8fb9\u6570\n\n    // \u66f4\u65b0\u8d77\u59cb\u70b9\u90bb\u63a5\u8fb9\u7684\u6743\u503c\n    for (int i = 0; i &lt; vertex_count; i++)\n    {\n        if (graph[start][i].weight &gt; 0)\n        {\n            lowcost[i] = graph[start][i].weight;\n            closest[i] = start;\n        }\n    }\n\n    // \u9010\u6b65\u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\n    for (int i = 1; i &lt; vertex_count; i++)\n    {\n        int min_cost = INFINITY;\n        int min_index = -1;\n\n        // \u627e\u51fa\u672a\u52a0\u5165\u9876\u70b9\u4e2d\u6743\u503c\u6700\u5c0f\u7684\u8fb9\n        for (int j = 0; j &lt; vertex_count; j++)\n        {\n            if (!visited[j] &amp;&amp; lowcost[j] &lt; min_cost)\n            {\n                min_cost = lowcost[j];\n                min_index = j;\n            }\n        }\n\n        // \u5c06\u627e\u5230\u7684\u9876\u70b9\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\n        if (min_index != -1)\n        {\n            visited[min_index] = 1;\n\n            minst[mstcount].u = closest[min_index];\n            minst[mstcount].v = min_index;\n            minst[mstcount].weight = lowcost[min_index];\n            minst[mstcount].id = graph[closest[min_index]][min_index].id;\n            mstcount++;\n\n            lowcost[min_index] = 0; // \u5df2\u52a0\u5165\u9876\u70b9\u6743\u503c\u8bbe\u4e3a0\n\n            // \u66f4\u65b0\u65b0\u52a0\u5165\u9876\u70b9\u7684\u90bb\u63a5\u8fb9\n            for (int k = 0; k &lt; vertex_count; k++)\n            {\n                if (!visited[k] &amp;&amp; graph[min_index][k].weight &gt; 0 &amp;&amp;\n                    graph[min_index][k].weight &lt; lowcost[k])\n                {\n                    lowcost[k] = graph[min_index][k].weight;\n                    closest[k] = min_index;\n                }\n            }\n        }\n    }\n}\n\nint main()\n{\n    int i, j, weight, id;\n    int vertex1, vertex2;\n\n    scanf(\"%d%d\", &amp;vertex_count, &amp;edge_count);\n    for (i = 1; i &lt;= edge_count; i++)\n    {\n        scanf(\"%d%d%d%d\", &amp;id, &amp;vertex1, &amp;vertex2, &amp;weight);\n        graph[vertex1][vertex2].id = id;\n        graph[vertex1][vertex2].weight = weight;\n        graph[vertex2][vertex1].id = id;\n        graph[vertex2][vertex1].weight = weight;\n    }\n    prim(0); // \u4ece\u9876\u70b90\u5f00\u59cb\u6784\u5efa\u6700\u5c0f\u751f\u6210\u6811\n    return 0;\n}\n</code></pre>"},{"location":"Learn/DataStruct/#dijkstra","title":"\u5317\u4eac\u5730\u94c1\u67e5\u8be2\uff08dijkstra\uff09","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n\n#define MAXNUM 512      // \u5730\u94c1\u6700\u5927\u7ad9\u6570\n#define MAXLEN 16       // \u5730\u94c1\u7ad9\u540d\u7684\u6700\u5927\u957f\u5ea6\n#define INFINITY 999999 // \u65e0\u7a77\u5927\n\nstruct station\n{                       // \u8f66\u7ad9\u4fe1\u606f\n    char sname[MAXLEN]; // \u8f66\u7ad9\u540d\n    int ischange;       // \u662f\u5426\u4e3a\u6362\u4e58\u7ad9\uff0c0-\u5426\uff0c1-\u6362\u4e58\n};\nstruct weight\n{\n    int weight;  // \u4e24\u4e2a\u7ad9\u95f4\u7684\u6743\u91cd\uff0c\u5373\u76f8\u5dee\u7ad9\u6570\uff0c\u7f3a\u7701\u4e3a1\n    int line_id; // \u4e24\u4e2a\u9876\u70b9\u6240\u5728\u7684\u7ebf\u53f7\n};\nstruct station BGvertex[MAXNUM];         // \u5730\u94c1\u7f51\u7edc\u56fe\u9876\u70b9\u6570\u7ec4\nstruct weight BGweights[MAXNUM][MAXNUM]; // \u7f51\u7edc\u56fe\u6743\u91cd\u6570\u7ec4\uff0c\u90bb\u63a5\u77e9\u9635\nint station_num = 0;                     // \u5b9e\u9645\u5730\u94c1\u603b\u7ad9\u6570\n\nchar start_station[MAXLEN]; // \u8d77\u70b9\u7ad9\u540d\nchar end_station[MAXLEN];   // \u7ec8\u70b9\u7ad9\u540d\n\nint addVertex(struct station st)\n{\n    int i;\n    for (i = 0; i &lt; station_num; i++)\n    {\n        if (strcmp(BGvertex[i].sname, st.sname) == 0)\n        {\n            return i; // \u5df2\u5b58\u5728\u8be5\u7ad9\uff0c\u8fd4\u56de\u5176\u4e0b\u6807\n        }\n    }\n    BGvertex[station_num] = st;                   // \u6dfb\u52a0\u65b0\u7ad9\n    BGvertex[station_num].ischange = st.ischange; // \u8bbe\u7f6e\u6362\u4e58\u7ad9\u6807\u5fd7\n    return station_num++;                         // \u8fd4\u56de\u65b0\u7ad9\u7684\u4e0b\u6807\u5e76\u589e\u52a0\u603b\u7ad9\u6570\n}\n\nvoid initMap()\n{\n    FILE *fp;\n    int i, j, snum, line_id, lnum, v1, v2; // v1\u4e3a\u4e0a\u4e00\u4e2a\u7ad9\u7684\u4e0b\u6807\uff0cv2\u4e3a\u5f53\u524d\u7ad9\u7684\u4e0b\u6807\n    struct station st;\n\n    fp = fopen(\"bgstations.txt\", \"r\");\n\n    fscanf(fp, \"%d\", &amp;snum);\n\n    for (i = 0; i &lt; snum; i++)\n    {\n        fscanf(fp, \"%d %d\", &amp;line_id, &amp;lnum);\n        v1 = v2 = -1;\n        for (j = 0; j &lt; lnum; j++)\n        {\n            fscanf(fp, \"%s %d\", st.sname, &amp;st.ischange);\n            v2 = addVertex(st); // \u5c06\u8be5\u7ad9\u52a0\u5230\u7ad9\u4fe1\u606f\u6570\u7ec4\u4e2d\uff0c\u8fd4\u56de\u5176\u4e0b\u6807\n            if (v1 != -1)\n            {\n                BGweights[v1][v2].weight = BGweights[v2][v1].weight = 1;\n                BGweights[v1][v2].line_id = BGweights[v2][v1].line_id = line_id;\n            }\n            v1 = v2;\n        }\n    }\n    fclose(fp);\n    return;\n}\n\nint stationIndex(const char *sname)\n{\n    int i;\n    for (i = 0; i &lt; station_num; i++)\n    {\n        if (strcmp(BGvertex[i].sname, sname) == 0)\n        {\n            return i; // \u8fd4\u56de\u7ad9\u540d\u5bf9\u5e94\u7684\u4e0b\u6807\n        }\n    }\n    return -1; // \u672a\u627e\u5230\u8be5\u7ad9\u540d\n}\n\nvoid dijistra(int start, int end)\n{\n    int i, j, k, min, v;\n    int dist[MAXNUM];          // \u5b58\u50a8\u8d77\u70b9\u5230\u5404\u4e2a\u9876\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u4f8b\u5982 dist[i] = 5 \u8868\u793a\u8d77\u70b9\u5230\u9876\u70b9i\u7684\u6700\u77ed\u8ddd\u79bb\u4e3a5\n    int path[MAXNUM];          // \u5b58\u50a8\u524d\u9a71\u9876\u70b9,                \u4f8b\u5982 path[i] = j \u8868\u793a\u9876\u70b9i\u7684\u524d\u9a71\u9876\u70b9\u662fj\n    int visited[MAXNUM] = {0}; // \u8bb0\u5f55\u9876\u70b9\u662f\u5426\u5df2\u8bbf\u95ee\n\n    for (i = 0; i &lt; station_num; i++)\n    {\n        dist[i] = INFINITY; // \u521d\u59cb\u5316\u8ddd\u79bb\u4e3a\u65e0\u7a77\u5927\n        path[i] = -1;       // \u521d\u59cb\u5316\u524d\u9a71\u9876\u70b9\u4e3a-1\n    }\n    dist[start] = 0; // \u8d77\u70b9\u5230\u81ea\u8eab\u7684\u8ddd\u79bb\u4e3a0\n\n    for (i = 0; i &lt; station_num; i++)\n    {\n        min = INFINITY;\n        v = -1;\n        for (j = 0; j &lt; station_num; j++)\n        {\n            if (!visited[j] &amp;&amp; dist[j] &lt; min)\n            {\n                min = dist[j];\n                v = j; // \u627e\u5230\u672a\u8bbf\u95ee\u7684\u6700\u5c0f\u8ddd\u79bb\u9876\u70b9\n            }\n        }\n        if (v == -1)\n            break; // \u5982\u679c\u6ca1\u6709\u53ef\u8bbf\u95ee\u7684\u9876\u70b9\uff0c\u9000\u51fa\u5faa\u73af\n\n        visited[v] = 1; // \u6807\u8bb0\u8be5\u9876\u70b9\u5df2\u8bbf\u95ee\n\n        for (j = 0; j &lt; station_num; j++)\n        {\n            if (!visited[j] &amp;&amp; BGweights[v][j].weight &gt; 0) // \u6709\u8fb9\u4e14\u672a\u8bbf\u95ee\n            {\n                if (dist[v] + BGweights[v][j].weight &lt; dist[j])\n                {\n                    dist[j] = dist[v] + BGweights[v][j].weight;\n                    path[j] = v; // \u66f4\u65b0\u524d\u9a71\u9876\u70b9\n                }\n            }\n        }\n    }\n    // \u7b97\u6cd5\u7ed3\u675f\uff0c\u4e0b\u9762\u6309\u7167\u8981\u6c42\u8f93\u51fa\n\n    //  // \u6253\u5370path\u6570\u7ec4\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e00\u7ad9\u7684\u524d\u9a71\u7ad9\n    //  for (i = 0; i &lt; station_num; i++)\n    //  {\n    //      printf(\"path[%d] = %d\\n\", i, path[i]);\n    //  }\n\n    // \u8f93\u51fa\u6700\u77ed\u8def\u5f84\u548c\u8ddd\u79bb\n    // printf(\"\u4ece %s \u5230 %s \u7684\u6700\u77ed\u8def\u5f84\u4e3a\uff1a\", BGvertex[start].sname, BGvertex[end].sname);\n    if (dist[end] == INFINITY)\n    {\n        printf(\"FAIL!\\n\");\n        return;\n    }\n    int route[MAXNUM]; // \u5b58\u50a8\u6700\u77ed\u8def\u5f84\u7684\u9876\u70b9\u4e0b\u6807\uff0c\u8bb0\u5f55\u987a\u5e8f\u4e3a\u4ece\u7ec8\u70b9\u5230\u8d77\u70b9\uff08\u56e0\u4e3apath\u8bb0\u5f55\u7684\u662f\u524d\u9a71\u9876\u70b9\uff09\n    int count = 0;     // \u8def\u5f84\u9876\u70b9\u8ba1\u6570,\u5305\u62ec\u8d77\u70b9\u7684\u603b\u7ad9\u6570 \u5373=dist[end]+1\n\n    // \u4ece\u7ec8\u70b9\u5f00\u59cb\u56de\u6eaf\u5230\u8d77\u70b9\uff0c\u6784\u5efa\u6700\u77ed\u8def\u5f84 end-&gt;path[end]-&gt;path[path[end]]-&gt;...-&gt;start\n    for (k = end; k != -1; k = path[k])\n    {\n        route[count++] = k;\n    }\n    // \u9006\u5e8f\u8f93\u51fa\u8def\u5f84\uff0c\u56e0\u4e3a\u6211\u4eec\u662f\u4ece\u7ec8\u70b9\u56de\u6eaf\u5230\u8d77\u70b9\u7684\n    // \u8f93\u51fa\u683c\u5f0f\uff1astart-line_id(num)-change-line_id(num)-...-end\n    for (i = count - 1; i &gt;= 0; i--)\n    {\n        if (i == count - 1)\n        {\n            printf(\"%s\", BGvertex[route[i]].sname); // \u8f93\u51fa\u8d77\u70b9\u7ad9\u540d\n        }\n        else if (i == 0)\n        {\n            printf(\"-%s\", BGvertex[route[i]].sname); // \u8f93\u51fa\u7ec8\u70b9\u7ad9\u540d\n        }\n        else\n        {\n            int line_id = BGweights[route[i]][route[i + 1]].line_id;\n            int num = 1;\n            while (i &gt; 0 &amp;&amp; BGweights[route[i]][route[i - 1]].line_id == line_id) // \u4e0b\u4e00\u4e2a\u7ad9\u548c\u5f53\u524d\u7ad9\u5728\u540c\u4e00\u6761\u7ebf\u8def\u4e0a\n            {\n                num++;\n                i--;\n            }\n            // \u5faa\u73af\u7ed3\u675f\u540e\uff0ci\u6307\u5411\u6362\u4e58\u7ad9\n            // num=\u5f53\u524d\u7ebf\u8def\u7ad9\u6570\n            printf(\"-%d(%d)-%s\", line_id, num, BGvertex[route[i]].sname); // \u8f93\u51fa\u7ebf\u8def\u4fe1\u606f\u548c\u6362\u4e58\u7ad9\u540d\n            if (i - 1 == 0)\n            {\n                printf(\"-%d(%d)-%s\", BGweights[route[i]][route[i - 1]].line_id, 1, BGvertex[route[i - 1]].sname); // \u5982\u679c\u662f\u6362\u4e58\u7ad9\u4e14\u524d\u9762\u6ca1\u6709\u5176\u4ed6\u7ad9\uff0c\u5219\u8f93\u51fa\u524d\u4e00\u4e2a\u7ad9\u540d\n                break;\n            }\n        }\n    }\n\n    // printf(\"\\n\u6700\u77ed\u8ddd\u79bb\u4e3a\uff1a%d\\n\", dist[end]);\n\n    // \u8f93\u51fa\u6362\u4e58\u7ad9\u4fe1\u606f\n    // printf(\"\\n\u6362\u4e58\u7ad9\u4fe1\u606f\uff1a\\n\");\n    // for (i = 0; i &lt; count; i++)\n    // {\n    //     if (BGvertex[route[i]].ischange)\n    //     {\n    //         printf(\"%s \", BGvertex[route[i]].sname);\n    //     }\n    // }\n    // printf(\"\\n\");\n    // // \u8f93\u51fa\u7ebf\u8def\u4fe1\u606f\n    // printf(\"\u7ebf\u8def\u4fe1\u606f\uff1a\\n\");\n    // for (i = 0; i &lt; count - 1; i++)\n    // {\n    //     int line_id = BGweights[route[i]][route[i + 1]].line_id;\n    //     if (line_id &gt; 0)\n    //     {\n    //         printf(\"%s -&gt; %s: \u7ebf\u8def %d\\n\", BGvertex[route[i]].sname, BGvertex[route[i + 1]].sname, line_id);\n    //     }\n    // }\n    // printf(\"\\n\");\n}\nint main()\n{\n    struct station st;\n    int i, j;\n\n    initMap(); // \u521d\u59cb\u5316\u5730\u94c1\u7f51\u7edc\u56fe\n\n    // printf(\"\u5730\u94c1\u7ad9\u4fe1\u606f\uff1a\\n\");\n    // for (i = 0; i &lt; station_num; i++)\n    // {\n    //     printf(\"%s %d\\n\", BGvertex[i].sname, BGvertex[i].ischange);\n    // }\n    int v1, v2;\n    scanf(\"%s %s\", start_station, end_station);\n\n    v1 = stationIndex(start_station);\n    v2 = stationIndex(end_station);\n\n    dijistra(v1, v2);\n\n    return 0;\n}\n</code></pre>"},{"location":"Learn/DataStruct/#_11","title":"\u6392\u5e8f","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint buf[105];\nint t[105];\nint n;\nint num = 0; // comparison count\nvoid swap(int *a, int *b)\n{\n    int tmp = *a;\n    *a = *b;\n    *b = tmp;\n}\nvoid xuanze()\n{\n    for (int i = 0; i &lt; n - 1; i++)\n    {\n        int min = i;\n        for (int j = i + 1; j &lt; n; j++)\n        {\n            num++;\n            if (buf[j] &lt; buf[min])\n                min = j;\n        }\n        if (min != i)\n        {\n            int temp = buf[i];\n            buf[i] = buf[min];\n            buf[min] = temp;\n        }\n    }\n}\nvoid bubble()\n{\n    for (int i = 0; i &lt; n - 1; i++)\n    {\n        int flag = 0;\n        for (int j = 0; j &lt; n - 1 - i; j++)\n        {\n\n            num++;\n            if (buf[j] &gt; buf[j + 1])\n            {\n                flag = 1;\n                int temp = buf[j];\n                buf[j] = buf[j + 1];\n                buf[j + 1] = temp;\n            }\n        }\n        if (!flag)\n            break;\n    }\n}\n// \u5806\u6392\u5e8f\nvoid adjust(int k[], int i, int n) // \u6784\u5efa\u5806\n{\n    int j, temp;\n    temp = k[i];\n    j = 2 * i + 1;\n    while (j &lt; n)\n    {\n        if (j &lt; n - 1 &amp;&amp; k[j] &lt; k[j + 1])\n            j++;\n        num++;\n        if (temp &gt;= k[j])\n            break;\n        k[(j - 1) / 2] = k[j];\n        j = 2 * j + 1;\n    }\n    k[(j - 1) / 2] = temp;\n}\nvoid heap(int k[], int n)\n{\n    int i;\n    int temp;\n    for (i = n / 2 - 1; i &gt;= 0; i--)\n        adjust(k, i, n);\n    for (i = n - 1; i &gt;= 1; i--)\n    {\n        temp = k[i];\n        k[i] = k[0];\n        k[0] = temp;\n        adjust(k, 0, i);\n    }\n}\n\n// \u4e8c\u8def\u5f52\u5e76\u6392\u5e8f\n\nvoid merge(int l1, int r1, int l2, int r2)\n{\n    int i = l1, j = l2, q = l1;\n    while (i &lt;= r1 &amp;&amp; j &lt;= r2)\n    {\n        num++;\n        if (buf[i] &lt;= buf[j])\n            t[q++] = buf[i++];\n        else\n            t[q++] = buf[j++];\n    }\n    while (i &lt;= r1)\n        t[q++] = buf[i++];\n    while (j &lt;= r2)\n        t[q++] = buf[j++];\n    for (int p = l1; p &lt;= r2; p++)\n        buf[p] = t[p];\n}\nvoid mergesort(int l, int r)\n{\n    int m = (l + r) / 2;\n    if (l &lt; r)\n    {\n        mergesort(l, m);\n        mergesort(m + 1, r);\n        merge(l, m, m + 1, r);\n    }\n}\n\n// \u5feb\u6392\nvoid quick(int left, int right)\n\n{\n    int i, last;\n    if (left &lt; right)\n    {\n        last = left;\n        for (i = left + 1; i &lt;= right; i++)\n        {\n            num++;\n            if (buf[i] &lt; buf[left])\n                swap(&amp;buf[++last], &amp;buf[i]);\n        }\n        swap(&amp;buf[left], &amp;buf[last]);\n        quick(left, last - 1);\n        quick(last + 1, right);\n    }\n}\n\nint main()\n{\n    int op;\n    scanf(\"%d%d\", &amp;n, &amp;op);\n    for (int i = 0; i &lt; n; i++)\n    {\n        scanf(\"%d\", &amp;buf[i]);\n    }\n    if (op == 1)\n        xuanze();\n    else if (op == 2)\n        bubble();\n    else if (op == 3)\n        heap(buf, n);\n    else if (op == 4)\n        mergesort(0, n - 1);\n    else if (op == 5)\n        quick(0, n - 1);\n\n    for (int i = 0; i &lt; n; i++)\n    {\n        if (i == n - 1)\n            printf(\"%d\\n\", buf[i]);\n        else\n            printf(\"%d \", buf[i]);\n    }\n\n    printf(\"%d\", num);\n    return 0;\n}\n</code></pre>"},{"location":"Learn/DataStruct/#_12","title":"\u7b97\u6cd5\u6a21\u5757","text":""},{"location":"Learn/DataStruct/#_13","title":"\u56de\u6eaf","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdbool.h&gt;\n\n// \u95ee\u9898\u89c4\u6a21\u9650\u5236\n#define MAX_SIZE 100\n\n// \u5168\u5c40\u53d8\u91cf\nint solution[MAX_SIZE]; // \u5f53\u524d\u89e3\nbool used[MAX_SIZE];    // \u8d44\u6e90\u4f7f\u7528\u72b6\u6001\uff08\u53ef\u9009\uff09\nint depth = 0;          // \u5f53\u524d\u89e3\u957f\u5ea6\n\n// \u56de\u6eaf\u6838\u5fc3\u51fd\u6570\nvoid backtrack(int step)\n{\n    // 1. \u7ec8\u6b62\u6761\u4ef6\uff1a\u68c0\u67e5\u5f53\u524d\u89e3\u662f\u5426\u5b8c\u6574\n    if (isComplete(step))\n    {\n        processSolution(step); // \u5904\u7406\u6709\u6548\u89e3\n        return;\n    }\n\n    // 2. \u751f\u6210\u5019\u9009\u96c6\uff08\u5f53\u524d\u6b65\u53ef\u7528\u7684\u9009\u9879\uff09\n    int candidates[MAX_SIZE];\n    int count = generateCandidates(step, candidates);\n\n    // 3. \u904d\u5386\u6240\u6709\u5019\u9009\u9009\u9879\n    for (int i = 0; i &lt; count; i++)\n    {\n        int candidate = candidates[i];\n\n        // 4. \u9a8c\u8bc1\u5019\u9009\u9009\u9879\u7684\u53ef\u884c\u6027\n        if (isValid(step, candidate))\n        {\n            // 5. \u505a\u51fa\u9009\u62e9\n            makeChoice(step, candidate);\n\n            // 6. \u9012\u5f52\u6df1\u5165\n            backtrack(step + 1);\n\n            // 7. \u56de\u6eaf\uff1a\u64a4\u9500\u9009\u62e9\n            undoChoice(step, candidate);\n        }\n    }\n}\n\n// ===== \u9700\u8981\u6839\u636e\u95ee\u9898\u5b9e\u73b0\u7684\u51fd\u6570 =====\nbool isComplete(int step)\n{\n    // \u5b9e\u73b01\uff1a\u68c0\u67e5\u5f53\u524d\u89e3\u662f\u5426\u5b8c\u6574\uff08\u7ec8\u6b62\u6761\u4ef6\uff09\n}\n\nvoid processSolution(int step)\n{\n    // \u5b9e\u73b02\uff1a\u5904\u7406\u627e\u5230\u7684\u5b8c\u6574\u89e3\uff08\u6253\u5370/\u5b58\u50a8\uff09\n}\n\nint generateCandidates(int step, int candidates[])\n{\n    // \u5b9e\u73b03\uff1a\u751f\u6210\u5f53\u524d\u6b65\u7684\u5019\u9009\u9009\u9879\u96c6\u5408\n    // \u8fd4\u56de\u5019\u9009\u6570\u91cf\n}\n\nbool isValid(int step, int candidate)\n{\n    // \u5b9e\u73b04\uff1a\u9a8c\u8bc1\u5019\u9009\u9009\u9879\u7684\u53ef\u884c\u6027\n}\n\nvoid makeChoice(int step, int candidate)\n{\n    // \u5b9e\u73b05\uff1a\u5c06\u5019\u9009\u9009\u9879\u52a0\u5165\u5f53\u524d\u89e3\n}\n\nvoid undoChoice(int step, int candidate)\n{\n    // \u5b9e\u73b06\uff1a\u5c06\u5019\u9009\u9009\u9879\u4ece\u5f53\u524d\u89e3\u79fb\u9664\n}\n// =================================\n\nint main()\n{\n    // \u521d\u59cb\u5316\u6240\u6709\u72b6\u6001\n    for (int i = 0; i &lt; MAX_SIZE; i++)\n    {\n        solution[i] = 0;\n        used[i] = false;\n    }\n\n    // \u542f\u52a8\u56de\u6eaf\n    backtrack(0);\n\n    return 0;\n}\n</code></pre>"},{"location":"Learn/Lang-C/","title":"C \u8bed\u8a00\u7b14\u8bb0","text":""},{"location":"Learn/Lang-C/#_1","title":"\u96f6\u788e\u77e5\u8bc6\u70b9","text":""},{"location":"Learn/Lang-C/#_2","title":"\u5b57\u7b26\u4e32\u8d4b\u503c","text":"<pre><code>{\n    char str1[] = \"China\"; // \u6b63\u786e\n    // char str2[10]; strcpy(str2, \"abcdefghijklmn\"); // \u9519\u8bef\uff1a\u957f\u5ea6\u4e0d\u5339\u914d\n    // char str3[10] = \"abcdefghigklmn\"; // \u9519\u8bef\uff1a\u957f\u5ea6\u4e0d\u5339\u914d\n}\n</code></pre>"},{"location":"Learn/Lang-C/#_3","title":"\u6570\u7ec4\u6307\u9488 / \u6307\u9488\u6570\u7ec4","text":"<pre><code>{\n    int *q1[5]; // \u6570\u7ec4\u6307\u9488\uff0cq1 \u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u91cc\u662f\u6307\u5411 int \u7684\u6307\u9488\n    // \u521d\u59cb\u5316\u793a\u4f8b\uff1a{ &amp;a[1], &amp;a[2], ... }\n    // \u7b49\u4ef7\u5199\u6cd5\uff1a\n    int *(q1_equiv[5]);\n\n    int (*q2)[5]; // \u6307\u9488\u6570\u7ec4\uff0cq2 \u662f\u4e00\u4e2a\u6307\u9488\uff0c\u6307\u5411\u542b\u6709 [5 \u4e2a int \u5143\u7d20]\u7684\u4e00\u7ef4\u6570\u7ec4\n}\n</code></pre>"},{"location":"Learn/Lang-C/#_4","title":"\u8fd0\u7b97\u7b26\u4f18\u5148\u7ea7","text":"<pre><code>{\n    ++\u7684\u8fd0\u7b97\u7ea7\u522b\u4f4e\u4e8e-&gt;;\n}\n</code></pre>"},{"location":"Learn/Lang-C/#_5","title":"\u6587\u4ef6\u5904\u7406","text":"<pre><code>// \u4f7f\u7528\u6587\u4ef6\u524d\u540e\u5fc5\u987b\u8fdb\u884c\u6253\u5f00\u548c\u5173\u95ed\n{\n    FILE *fopen(char *filename, char *type);\n    type = \"r\"(\u53ea\u8bfb), \"w\"(\u5199)\n\n    FILE *in = fopen(\"xxx.txt\", \"r\");\n\n    // \u5e38\u7528\u7684\u8bfb\u53d6\u5b57\u7b26\u65b9\u5f0f\n    int ch;\n    while ((c = fgetc(in)) != EOF)\n    {\n        // \u5904\u7406\u5b57\u7b26\n    }\n    //\u4e00\u884c\u4e00\u884c\u8bfb\u53d6\n    while(fgets(str,100,in))\n    {\n        //...\n    }\n\n    fclose(in);\n    //\u628a\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u76f4\u63a5\u91cd\u5b9a\u5411\u5230\u6587\u4ef6\uff0c\u8fd9\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5scanf\u8bfbin  printf\u5199out\n    freopen(\"filein.txt\", \"r\", stdin);\n    freopen(\"fileout.txt\", \"w\", stdout);\n}\n</code></pre>"},{"location":"Learn/Lang-C/#qsort","title":"qsort \u6392\u5e8f","text":"<pre><code>// qsort(\u9996\u5730\u5740, \u5143\u7d20\u6570\u91cf, \u6bcf\u4e2a\u5143\u7d20\u5927\u5c0f, \u6bd4\u8f83\u51fd\u6570);\n\nstruct a_struct\n{\n    char name[20];\n    int value;\n} a[10];\n\n// \u793a\u4f8b\u8c03\u7528\n// qsort(a, 10, sizeof(struct a_struct), cmp);\n// cmp \u51fd\u6570\u5185\u9700\u8981\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u4e3a\u6570\u7ec4\u5e76\u4f7f\u7528 -&gt; \u8bbf\u95ee\u5b57\u6bb5\n</code></pre>"},{"location":"Learn/Lang-C/#_6","title":"\u8f93\u5165/\u8f93\u51fa\u603b\u7ed3","text":"<pre><code>{\n    gets(arr); // \u8bfb\u5165\u5b57\u7b26\u4e32 \u76f4\u81f3\u8bfb\u5230 \u56de\u8f66\n    puts(arr); //=printf(\"%s\\n\",arr)  //\u6ce8\u610f\\n\n\n    fgets(arr, 1005, stdin);\n    fputs(arr, 1005, stdout);\n\n    getchar();   // \u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26  \u76f4\u81f3\u56de\u8f66 \u4f46\u53ea\u6709\u7b2c\u4e00\u4e2a \u8bfb\u5165\n    putchar(ch); // \u8f93\u51fa\u4e00\u4e2a\u5b57\u7b26 = printf(\"%c\",ch)\n\n    fscanf(FILE * stream, const char *format, [argument...]);\n    fscanf(stdin, \"%s\", str); // \u4e0efgets\u4e0d\u540c \u8fd9\u4e2a\u8bfb\u5230\u7a7a\u683c\u5c31\u7ed3\u675f\u4e86 \u800c\u4e0d\u662f\u56de\u8f66\n\n    printf(\"%9.2d\", n); // 9--&gt;\u573a\u5bbd  .2--&gt;\u5c0f\u6570\u70b9    -9 --&gt;\u5411\u5de6\u5bf9\u9f50\n    // \u8d85\u51fa\u573a\u5bbd \u4ee5\u5b9e\u9645\u4e3a\u4e3b\n    % 8s \u540c\u7406 % 04d // \u573a\u5bbd\u524d\u7f6e 0 --&gt;\u8f93\u51fa\u503c\u524d+0\n}\n</code></pre>"},{"location":"Learn/Lang-C/#sscanfsprintf","title":"sscanf/sprintf","text":"<pre><code>{\n    fgets(str, 1005, stdin);\n    fgets(format, 1005, stdin);\n\n    sscanf(str, format, s);\n    // \u5c06s\u4ee5format\u7684\u683c\u5f0f\u8bfb\u5165str\n    // \u6309\u7167format\u7ed9\u51fa\u7684\u683c\u5f0f \u4ecestr\u91cc\u9762\u8bfb\u53d6\u9700\u8981\u7684\u4e1c\u897f \u5982\u5b57\u7b26\u4e32 \u6570\u5b57...\n    // eg:\n    {\n        strcpy(dtm, \"Saturday March 25 1989\");\n        sscanf(dtm, \"%s %s %d  %d\", weekday, month, &amp;day, &amp;year);\n    }\n\n    sprintf\n        // sprintf\uff08format\uff0c\"\u683c\u5f0f\"\uff0c\u4f20\u5165\u7684\u6570\u636e\uff09\n        // \u4ee5\u67d0\u79cd\u5f62\u5f0f\u5c06\u6570\u636e\u4f20\u5165 \u591a\u7528\u4e8e \u8f6c\u6362\u4e3a \u5b57\u7b26\u4e32\n        /*\n        int a=123;\n        sprintf(str,%d,a);\n        puts(str);// 123\n        */\n        sprintf(format_p, \"%%%d.%ds\", k, x);\n    printf(format_p, s); // \u5c06format_p\u4f5c\u4e3a\u8f93\u51fa\u683c\u5f0f\n    // \u6ce8\u610f%%%d\u62c6\u89e3\u4e3a %% (\u8f6c\u4e49%) %d\u8bfb\u5165k\uff1b\n}\n</code></pre>"},{"location":"Learn/Lang-C/#_7","title":"\u5904\u7406\u91cd\u590d\u5143\u7d20","text":"<pre><code>// \u6392\u5e8f\u540e\u53bb\u91cd\n\n// \u5148\u628a\u6570\u636e\u6392\u5e8f\nqsort(arr, n, sizeof(int), cmp); // cmp\u4e3a\u6bd4\u8f83\u51fd\u6570\n// \u7136\u540e\u904d\u5386\u6570\u7ec4\uff0c\u627e\u5230\u91cd\u590d\u7684\u5143\u7d20\u5e76\u5220\u9664\nint new_len = 0;\nfor (int i = 0; i &lt; n; i++)\n{\n    if (i == 0 || arr[i] != arr[i - 1])\n    {\n        arr[new_len++] = arr[i]; // \u4fdd\u7559\u4e0d\u91cd\u590d\u7684\u5143\u7d20\n    }\n}\n</code></pre>"},{"location":"Learn/Lang-C/#_8","title":"\u8bfb\u5b57\u7b26\u4e32\u5c06\u5176\u4e2d\u7684\u6570\u5b57\u5b57\u7b26\u8f6c\u5316\u4e3a\u6570\u5b57","text":"<pre><code>char str[100];\nint num = 0;\nfor (int i = 0; str[i] != '\\0'; i++)\n{\n    if (str[i] &gt;= '0' &amp;&amp; str[i] &lt;= '9')\n    {\n        num = num * 10 + (str[i] - '0'); // \u5c06\u5b57\u7b26\u8f6c\u5316\u4e3a\u6570\u5b57\n    }\n}\nprintf(\"%d\\n\", num); // \u8f93\u51fa\u8f6c\u6362\u540e\u7684\u6570\u5b57\n\n// \u5982\u679c\u662f\u4ecestdin\u4e2d\u8bfb ch\u662f\u4e00\u4e2a\u4e00\u4e2a\u8bfb\u7684\n// \u6bd4\u5982 aaa 123 bbb 456\n// \u4e0b\u9762\u7684\u4ee3\u7801\u53ef\u4ee5\u5904\u7406  \u5728for\u4e2d\u4f1a\u591a\u8bfb\u4e00\u4e2a\u5b57\u7b26 \u7528ungetc\u653e\u56de\u53bb\nif (ch &gt;= '0' &amp;&amp; ch &lt;= '9')\n{\n    for (data = 0; ch &gt;= '0' &amp;&amp; ch &lt;= '9'; ch = getchar())\n        data = data * 10 + (ch - '0');\n\n    ungetc(ch, stdin);\n}\n</code></pre>"},{"location":"Learn/Lang-C/#_9","title":"\u8868\u8fbe\u5f0f","text":"<p>\u4e2d\u7f00\u8868\u8fbe\u5f0f \u6700\u5e38\u7528</p> <p>\u524d\u7f00\u8868\u8fbe\u5f0f \u4ece\u53f3\u5f80\u5de6 \u9047\u5230\u6570\u5b57\u538b\u6808 \u9047\u5230\u8fd0\u7b97\u7b26 \u5f39\u6808</p> <p>\u540e\u7f00\u8868\u8fbe\u5f0f \u4ece\u5de6\u5f80\u53f3...</p>"},{"location":"Learn/Lang-C/#_10","title":"\u7ea6\u745f\u592b\u95ee\u9898","text":"<p>\u9012\u63a8\u516c\u5f0f</p> <p>\\(f(n,m)=(f(n - 1, m) + m - 1) % n + 1;\\)</p>"},{"location":"Learn/papers/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E8%AF%95%E5%8D%B7/","title":"\u8f6f\u4ef6\u4e0e\u7f16\u7a0b 24\u671f\u672b\u56de\u5fc6\u7248","text":"<p>\u5199\u5728\u524d\u9762 \u300a\u8f6f\u4ef6\u4e0e\u7f16\u7a0b\u300b\u4e3a\u4e00\u4e2a\u4e24\u5b66\u5206\u7684\u8bfe \u65e0\u5948\u6ca1\u6709\u5f80\u5e74\u9898&amp;\u8001\u5e08\u900f\u9732\u7684\u8003\u8bd5\u4fe1\u606f\u4e5f\u5f88\u5c11 </p> <p>\u6545\u800c\u4eca\u5929\u4e0b\u5348\u521a\u8003\u5b8c\u8fd9\u95e8\u8bfe\u7684\u6211 \u8bd5\u56fe\u56de\u5fc6\u4e00\u4e0b \u4e3a\u540e\u6765\u4eba\u63d0\u4f9b\u590d\u4e60\u5e2e\u52a9 \u5fd8\u8bb0\u7684\u9898\u5927\u6982\u7387\u6bd4\u8f83\u7b80\u5355</p> <p>\u5982\u679c\u4f60\u8fd8\u8bb0\u5f97\u522b\u7684\u9898 \u6b22\u8fce\u8865\u5145~</p>"},{"location":"Learn/papers/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E8%AF%95%E5%8D%B7/#_1","title":"\u9009\u62e9\u9898","text":"<p>2\u5206\u4e00\u9053</p> <p>\u94fe\u8868\u6982\u5ff5</p> <p>\u987a\u5e8f\u7ebf\u6027\u8868\u63d2\u5165\u4e00\u4e2a\u503c\u65f6\u95f4\u590d\u6742\u5ea6</p> <p>\u6808</p> <p>......</p> <p>\u6709\u5411\u56fe\u8fb9\u754c\u6700\u5927\u6570</p> <p>....</p>"},{"location":"Learn/papers/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E8%AF%95%E5%8D%B7/#_2","title":"\u586b\u7a7a\u9898","text":"<p>2\u5206\u4e00\u9053</p> <p>\u94fe\u8868\u63d2\u5165</p> <p>\u4e8c\u53c9\u6811\u89c4\u5f8b</p> <p>\u7531\u4e2d\u5e8f \u540e\u5e8f\u904d\u5386\u63a8\u524d\u5e8f</p> <p>\u7d22\u5f15\u662f\u4ec0\u4e48\u7d22\u5f15  \uff08\u5b8c\u5168\u6ca1\u6709\u590d\u4e60\uff09</p> <p>\u6839\u636e\u56fe\u7ed3\u6784\u63a8BFS\u987a\u5e8f</p> <p>\u9009\u62e9\u548c\u586b\u7a7a\u90fd\u662f9\u9053\u9898</p>"},{"location":"Learn/papers/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E8%AF%95%E5%8D%B7/#sql","title":"SQL","text":"<p>ER\u56fe</p> <p>\u5173\u7cfb\u56fe</p> <p>sql\u8bed\u53e5\uff08\u521b\u5efa\u8868\u3001\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u8be2\u3001\u591a\u8868\u67e5\u8be2\uff09</p>"},{"location":"Learn/papers/%E8%BD%AF%E4%BB%B6%E7%BC%96%E7%A8%8B%E8%AF%95%E5%8D%B7/#_3","title":"\u7b97\u6cd5\u9898","text":"<p>\u8865\u5168\u53cc\u5411\u94fe\u8868</p> <p>\u4e8c\u5206\u67e5\u627e</p> <p>\u94fe\u8868\u67e5\u627e</p> <p>\u4e8c\u53c9\u6811\u627e\u6700\u5927\u503c\u6839\u7ed3\u70b9</p> <p>\u56fe\u7684\u5b9a\u4e49&amp;\u6bcf\u4e2a\u70b9\u7684\u51fa\u5ea6</p> <p>\u5e0c\u5c14\u6392\u5e8f\uff08\u5b8c\u5168\u6ca1\u60f3\u5230\uff09</p> <p>6\u9053\u7b97\u6cd5\u9898 \u5360\u6bd450\u5206</p>"},{"location":"Tech/","title":"technique!","text":"<p>here is something interesting\uff01</p>"},{"location":"Tech/Blog_Construct/obsidian%26git/","title":"\u57fa\u672c\u914d\u7f6e","text":"","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#_2","title":"\u521b\u5efa\u77e5\u8bc6\u5e93","text":"<p>\u9996\u5148\u7528obsidian\u6253\u5f00\u4f60\u7684\u672c\u5730\u535a\u8d44\u6e90\uff0c\u6253\u5f00\u6210\u529f\u540e\uff0c\u5c06\u4f1a\u5728\u6839\u76ee\u5f55\u4f1a\u751f\u6210\u4e00\u4e2a<code>.obsidian</code>\u6587\u4ef6\u5939\uff0c\u4f5c\u7528\u662f\u8bb0\u5f55\u4f60\u7684\u8bbe\u7f6e\u4ee5\u53ca\u5728\u8fd9\u4e2a\u77e5\u8bc6\u5e93\u91cc\u88c5\u7684\u4e00\u4e9b\u63d2\u4ef6\uff0c\u5728\u522b\u7684\u8bbe\u5907\u6253\u5f00\u8fd9\u4e2a\u77e5\u8bc6\u5e93\u5c31\u4e0d\u7528\u91cd\u65b0\u914d\u7f6e\u4e86\u3002</p>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#_3","title":"\u5ffd\u7565\u591a\u4f59\u6587\u4ef6","text":"<p>\u6253\u5f00 \u8bbe\u7f6e&gt;\u6587\u4ef6\u4e0e\u94fe\u63a5&gt;Exclude Files \u56e0\u4e3a\u6587\u7ae0\u90fd\u5728source\u4e0b\uff0c\u6240\u4ee5\u53ea\u4fdd\u7559source\uff0c\u5176\u5b83\u7684\u5ffd\u7565\u6389 \u8fd9\u6709\u5229\u4e8e\u63d0\u9ad8\u68c0\u7d22\u6548\u7387</p>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#_4","title":"\u6587\u7ae0\u7ba1\u7406","text":"","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#_5","title":"\u81ea\u5b9a\u4e49\u6587\u7ae0\u751f\u6210\u8def\u5f84","text":"<p><code>ctrl+\uff0c</code>\u6253\u5f00\u8bbe\u7f6e &gt; Files &amp; Links &gt; \u5b58\u653e\u65b0\u5efa\u7b14\u8bb0\u6587\u4ef6\u5939 &gt; <code>source/_posts</code></p>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#front-matter","title":"\u5feb\u901f\u63d2\u5165Front-Matter\u6a21\u677f","text":"<p>\u8bbe\u7f6e &gt; \u6838\u5fc3\u63d2\u4ef6 &gt;  \u6a21\u677f &gt; \u6253\u5f00\u6a21\u677f\u8bbe\u7f6e  \u5728\u6839\u76ee\u5f55\u521b\u5efa\u4e00\u4e2a<code>template</code>\u6587\u4ef6\u5939\uff0c\u8ba9\u6a21\u677f\u4fdd\u5b58\u5728\u6b64 \u8bbe\u7f6e\u65e5\u671f\u683c\u5f0f <code>YYYY-MM-DD HH:mm:ss</code> \u7f16\u5199\u6a21\u677f: \u6bd4\u5982\u8fd9\u6837\uff1a</p> <pre><code>---\ntitle: {{title}}\ndate: {{date}}\ntags:\nthumbnail: \ncategories:\nsticky: \nexcerpt: \n---\n</code></pre>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#git","title":"git\u63d2\u4ef6\u7684\u4f7f\u7528","text":"","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#git_1","title":"\u5b89\u88c5git","text":"<p>\u5728obsidian\u4e2d\uff0c\u5173\u95ed\u5b89\u5168\u6a21\u5f0f\u3002 \u5728\u793e\u533a\u63d2\u4ef6\u4e2d\u641c\u7d22Git\uff0c\u4e0b\u8f7dGit\u63d2\u4ef6\u3002</p>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#_6","title":"\u914d\u7f6e\u4ed3\u5e93","text":"<p>\u5728GitHub\u4e0a\u521b\u5efa\u4e00\u4e2a\u7a7a\u4ed3\u5e93\uff0creadme\u6587\u4ef6\u4e5f\u4e0d\u8981\u6709\u3002\u79c1\u4eba\u4ed3\u5e93\u5373\u53ef~ \u5728\u6839\u76ee\u5f55bash\u4e00\u4e0b\uff0c\u8f93\u5165</p> <pre><code>git init                 #\u521d\u59cb\u5316\u6587\u4ef6\u5939  \ngit add .                #\u6dfb\u52a0\u6587\u4ef6\u5230\u7f13\u5b58\u533a\u57df  \ngit commit -m \"\u6587\u4ef6\u63cf\u8ff0\"  #\u63d0\u4ea4\u66f4\u6539\u5e76\u6dfb\u52a0\u66f4\u6539\u4fe1\u606f  \ngit remote add origin https://github.com/xxx/note.git \uff08SSH\u6216\u7740HTTP\u7684\u4ed3\u5e93\u94fe\u63a5\uff09  \ngit push -u origin main \uff08branch\u662f\u4ec0\u4e48\u5c31\u662f\u4ec0\u4e48\uff0c\u4e00\u822c\u9ed8\u8ba4\u662fmain\uff09 #\u63a8\u9001\u5230\u4ed3\u5e93\u5b58\u50a8\n</code></pre> <p>\u5b8c\u6210\u4e0a\u8ff0\uff0cobsidian\u4e2d\u7684Git\u63d2\u4ef6\u5c31\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\u5566\uff0c\u540c\u65f6\u5728<code>git init</code>\u540e\uff0c\u76ee\u5f55\u4e0b\u51fa\u73b0\u4e86<code>.git</code>\u6587\u4ef6(\u770b\u4e0d\u89c1\u5c31\u662f\u88ab\u9690\u85cf\u4e86)~ tips \u53ef\u4ee5\u8bbe\u7f6e\u6bcfX\u5206\u949f\u81ea\u52a8\u5907\u4efd\u6587\u4ef6\u5230github\u4ed3\u5e93\u4e0a\u54e6</p>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#git-hook","title":"\u914d\u7f6eGit Hook","text":"<p>\u6253\u5f00<code>.git/hook</code>\uff0c\u65b0\u5efa<code>pre_commit</code>\u6587\u4ef6\uff08\u65e0\u540e\u7f00\uff09\u5199\u5165\u4e00\u4e0b\u4ee3\u7801\uff1a</p> <pre><code>#!/bin/sh\n\n#\u8fdb\u5165\u535a\u5ba2\u6240\u5728\u7684\u6839\u76ee\u5f55\u8fdb\u884chexo\u64cd\u4f5c \u8fd9\u91cc\u57fa\u7840\u76ee\u5f55\u4e0e`.git`\u540c\u76ee\u5f55\n\nhexo cl  \n\nhexo g  \n\nhexo d  \n\nif [ $? -ne 0 ]; then  \n  echo \"Hexo generate or deploy failed. Commit aborted.\"  \n  exit 1  \nfi  \n\nexit 0\n</code></pre> <p>\u606d\u559c\u4f60 \u73b0\u5728\u5c31\u53ef\u4ee5\u81ea\u52a8\u90e8\u7f72\u5566\uff01 \u53ea\u9700\u8981\u5199\u5b8c\u6587\u7ae0 \u7b49\u5f85obisidian\u81ea\u52a8\u90e8\u7f72\u5c31\u597d\u5566~\uff08\u5f53\u7136\u8fd9\u9700\u8981\u8bbe\u7f6e\u81ea\u52a8\u4e0a\u4f20\uff0c\u5426\u5219\u9700\u8981\u4f60\u52a8\u52a8\u9f20\u6807\u70b9\u4e00\u70b9\uff09</p>","tags":["tech"]},{"location":"Tech/Blog_Construct/obsidian%26git/#last","title":"Last","text":"<p>\u5b9e\u73b0\u7684\u903b\u8f91 obsidian\u4ed3\u5e93\u4e0a\u4f20\u5230GitHub\u65f6\u4f1a\u89e6\u53d1\u914d\u7f6e\u7684Hook\uff0c\u8fd9\u65f6\u4f1a\u8fd0\u884c<code>pre_commit</code>\u6587\u4ef6\uff0c\u5b9e\u73b0hexo\u7684--cl\uff0c--g\uff0c--d \u914d\u7f6e\u56fe\u7247\u7684\u4e8b\u60c5 \u4e0b\u6b21\u5427~</p>","tags":["tech"]},{"location":"blog/","title":"Blog","text":"<p>1111111 2222222</p>"},{"location":"blog/2024/07/02/hello-river/","title":"Hello River","text":"","tags":["essay"]},{"location":"blog/2024/07/02/hello-river/#_1","title":"\u5e8f","text":"<p>\u200b       \u4e3a\u4f55\u535a\u5ba2\uff1f\u8fd9\u4e2a\u60f3\u6cd5\u8d77\u521d\u662f\u5927\u4e00\u4e0a\u5b66\u671f\u77ed\u6682\u7684\u5fc3\u8840\u6765\u6f6e\uff08\u7ed3\u5c40\u5f53\u7136\u662f\u4e0d\u4e86\u4e86\u4e4b\uff09\uff0c\u5728\u4e0b\u5b66\u671f\u5076\u7136\u95f4\u63a5\u89e6\u5230\u8bb8\u591a\u5b66\u957f\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u77ac\u95f4\u91cd\u62fe\u4e86\u8fd9\u4e2a\u60f3\u6cd5\uff01\u4e8e\u662f\u5728\u671f\u672b\u8003\u8bd5\u7ed3\u675f\u5f53\u5929\uff0c\u4fbf\u9a6c\u4e0d\u505c\u8e44\u7684\u5f00\u542f\u4e86\u535a\u5ba2\u7684\u642d\u5efa\u3002\u7ec8\u4e8e\uff0c\u529f\u592b\u4e0d\u8d1f\u6709\u5fc3\u4eba\uff0criver\u8bde\u751f\u4e86\uff01</p> <p>\u200b       \u4f55\u4e3ariver\uff1f\u540d\u8bcd\u52a8\u5316\uff0c\u8bf8\u4f4d\u5e94\u8be5\u90fd\u6709\u6240\u8033\u95fb\u3002\u5728\u8fd9\u91cc\uff0c\u6211\u5927\u80c6\u7684\u5c06river\u52a8\u5316\uff0c\u8bd1\u4e3a\u201c\u5954\u6d41\u201d\u3002\u65e2\u662f\u7b14\u8005\u7684\u5e0c\u5180\uff0c\u540c\u65f6\u4e5f\u662f\u7b14\u8005\u540d\u5b57\u7684\u4e00\u79cd\u89e3\u6784\u3002</p> <p>\u200b       \u6709\u4f55\u76ee\u7684\uff1f\u5f53\u7136\u662f\u5206\u4eab\u7684\u6cb3\u6d41\uff01\u6211\u5e0c\u671b\u8fd9\u91cc\u6d41\u6dcc\u7740\u6587\u5b57\u3001\u7167\u7247\u3001 \u97f3\u4e50\u3001\u77e5\u8bc6\u4ee5\u53ca\u66f4\u591a\u7684\u6cb3\u6d41\u3002</p> <p>\u200b       \u7b2c\u4e00\u7bc7\u5185\u5bb9\uff1f\u7ec6\u5fc3\u7684\u7ae5\u978b\u5e94\u8be5\u53d1\u73b0\u6709\u4e24\u4e2a\u6309\u94ae\uff1a\u7b2c\u4e00\u4e2a\u5185\u5bb9\u4e3a\u5e8f\u8a00+\u535a\u5ba2\u642d\u5efa\u5fc3\u5f97\uff1b\u7b2c\u4e8c\u4e2a\u5185\u5bb9\u4e3a\u4f5c\u8005\u642d\u5efa\u65f6\u7684\u53d1\u75af\u65e5\u8bb0\u548c\u6d4b\u8bd5\u6587\u7a3f\u3002</p> <p>\u200b       \u7279\u522b\u611f\u8c22\uff1f\u611f\u8c22\u8bb8\u591a\u7f51\u7edcblogger\u7684\u7ecf\u9a8c\u5206\u4eab\u4ee5\u53ca\u5973\u670b\u53cb\u7684\u5927\u529b\u652f\u6301\u3002</p>","tags":["essay"]},{"location":"blog/2024/07/02/hello-river/#_2","title":"\u5fc3\u5f97","text":"<p>\u200b       \u672c\u535a\u5ba2\u5229\u7528GitHubPage+Netlify\u90e8\u7f72\u7684\u7f51\u7ad9\u3002\u6700\u5f00\u59cb\u4ec5\u4ec5\u662f\u90e8\u7f72\u5230github\u4e0a\uff0c\u7531\u4e8e\u5c5e\u4e8e\u5916\u7f51\uff0c\u4e14\u7b14\u8005\u4e0a\u4f20\u7684\u56fe\u7247\u5185\u5b58\u8f83\u5927\uff0c\u5bfc\u81f4\u7f51\u7ad9\u89e3\u6790\u5341\u5206\u7f13\u6162\uff0c\u56fe\u7247\u65e0\u6cd5\u52a0\u8f7d\uff0c\u751a\u81f3\u53ef\u80fd\u65e0\u6cd5\u8bbf\u95ee\u3002\u4e8e\u662f\u5f00\u59cb\u5728\u7f51\u4e0a\u5bfb\u627e\u89e3\u51b3\u65b9\u6cd5\uff0c\u4f5c\u8005\u5c1d\u8bd5\u4e86\u4e00\u4e0b\u51e0\u79cd\uff1a</p> <ol> <li>\u5229\u7528hexo-all-minifier\u63d2\u4ef6\uff08\u65e0\u6cd5\u901a\u8fc7npm\u4e0b\u8f7d\uff0c\u4f1a\u62a5\u9519\uff0c\u53ef\u4ee5\u6362\u7528hexo-neat\uff09</li> <li>\u5229\u7528CDN\u52a0\u901f</li> <li>\u5c06\u7f51\u7ad9\u540c\u65f6\u90e8\u7f72\u5230Netlify\u4e0a\uff08\u5168\u7403\u514d\u8d39CDN\u52a0\u901f+100G/\u6708\u7684\u514d\u8d39\u6d41\u91cf\uff09</li> </ol> <p>\u200b       \u7f51\u7ad9\u642d\u5efa\u6210\u529f\u540e\uff0c\u53ef\u4ee5\u8d2d\u4e70\u5c5e\u4e8e\u81ea\u5df1\u7684\u57df\u540d\uff0c\u6536\u8d39\u5c1a\u53ef\u63a5\u53d7\u3002</p>","tags":["essay"]},{"location":"blog/2024/07/02/hello-river/#_3","title":"\u529f\u80fd\u4ecb\u7ecd","text":"<p>\u200b       </p> <ul> <li>\u642d\u8f7d\u4e86Aplayer\u53ef\u4ee5\u64ad\u653e\u597d\u542c\u7684\u97f3\u4e50\uff08\u4e0d\u652f\u6301\u70b9\u6b4c \u76ee\u524d\u4ec5\u67091\u9996\uff09\u3002</li> <li>\u652f\u6301\u663c\u591c\u66f4\u6362\u3002</li> <li>Photos\u4e3a\u7011\u5e03\u6d41\u7167\u7247\u5899\u3002</li> <li>\u53cb\u94fe\u5df2\u5f00\u542f\uff0c\u6b22\u8fce\u5927\u5bb6\u6dfb\u52a0\u53cb\u94fe\u3002\uff08\u53ef\u4ee5\u901a\u8fc7\u90ae\u7bb1\u8054\u7cfb\u6211\uff0c\u6700\u597d\u5e26\u4e0a\u7f51\u7ad9\u7f29\u7565\u56fe\u54e6\uff09</li> <li>\u770b\u677f\u5a18\u6210\u529f\u6dfb\u52a0\uff01</li> <li>\u6682\u672a\u5f00\u542f\u8bc4\u8bba\u529f\u80fd\u3002</li> <li>.........</li> </ul>","tags":["essay"]},{"location":"blog/2024/07/02/hello-river/#to-do-next","title":"to do next","text":"<ul> <li> \u5b8c\u5584\u97f3\u4e50\u7684\u4ecb\u7ecd</li> <li> \u8bd5\u8bd5\u66f4\u9ad8\u7ea7\u7684\u770b\u677f\u5a18</li> <li> \u7559\u8a00\u5899\uff01</li> <li> \u66f4\u591a\u7684\u6587\u7ae0\uff01\uff01\uff01</li> <li> \u5b8c\u5584about\u9875\u9762</li> <li> ....</li> </ul>","tags":["essay"]},{"location":"blog/archive/2024/","title":"2024","text":""}]}